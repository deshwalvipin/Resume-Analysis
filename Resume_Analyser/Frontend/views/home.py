# views/home.py
import streamlit as st

# --- lightweight i18n fallback (works even if app.t isn't imported) ---
_I18N_LOCAL = {
    "English": {
        "BADGE": "üß† Resume Analyzer",
        "TITLE_PREFIX": "",
        "TITLE_CORE": "Make your resumes",
        "TITLE_GLOW": "shine",
        "TAGLINE": "Upload a resume, extract key sections and skills, benchmark against a job description, and track improvements over time ‚Äî all in one simple workflow.",
        "CTA_ANALYZE": "Analyze",
        "CTA_HISTORY": "History",
        "CTA_SETTINGS": "Settings",
        "CTA_ANALYZE_CAP": "Upload a resume & generate insights.",
        "CTA_HISTORY_CAP": "See previous runs & export CSV.",
        "CTA_SETTINGS_CAP": "Adjust parsing & preferences.",
        "FEATURE_1_TITLE": "üîç Smart Analysis",
        "FEATURE_1_BODY": "Parse PDF/DOCX, detect sections, skills & gaps. Scores tailored to your roles.",
        "FEATURE_1_BADGE": "NLP ¬∑ Scoring ¬∑ Hints",
        "FEATURE_2_TITLE": "üìà Version History",
        "FEATURE_2_BODY": "Compare edits over time and export a CSV of your iterations and scores.",
        "FEATURE_2_BADGE": "Diffs ¬∑ Trends",
        "FEATURE_3_TITLE": "‚öôÔ∏è Customizable",
        "FEATURE_3_BODY": "Toggle advanced parsing, add API keys, and fine-tune your analysis to your needs.",
        "FEATURE_3_BADGE": "Config ¬∑ Extensible",
        "QUICK_ACTIONS": "Quick actions",
    },
    "Espa√±ol": {
        "BADGE": "üß† Analizador de CV",
        "TITLE_PREFIX": "",
        "TITLE_CORE": "Haz que tu curr√≠culum",
        "TITLE_GLOW": "brille",
        "TAGLINE": "Sube un curr√≠culum, extrae secciones y habilidades, comp√°ralo con una oferta y sigue las mejoras, todo en un mismo flujo.",
        "CTA_ANALYZE": "Analizar",
        "CTA_HISTORY": "Historial",
        "CTA_SETTINGS": "Ajustes",
        "CTA_ANALYZE_CAP": "Sube un CV y genera insights.",
        "CTA_HISTORY_CAP": "Mira ejecuciones previas y exporta CSV.",
        "CTA_SETTINGS_CAP": "Ajusta el an√°lisis a tu gusto.",
        "FEATURE_1_TITLE": "üîç An√°lisis inteligente",
        "FEATURE_1_BODY": "Parsea PDF/DOCX, detecta secciones, habilidades y brechas. Puntuaciones para tus roles.",
        "FEATURE_1_BADGE": "NLP ¬∑ Scoring ¬∑ Consejos",
        "FEATURE_2_TITLE": "üìà Historial de versiones",
        "FEATURE_2_BODY": "Compara ediciones en el tiempo y exporta un CSV.",
        "FEATURE_2_BADGE": "Differences ¬∑ Tendencias",
        "FEATURE_3_TITLE": "‚öôÔ∏è Personalizable",
        "FEATURE_3_BODY": "Activa an√°lisis avanzado, a√±ade claves API y ajusta la evaluaci√≥n a tus necesidades.",
        "FEATURE_3_BADGE": "Config ¬∑ Extensible",
        "QUICK_ACTIONS": "Acciones r√°pidas",
    },
    "‡§π‡§ø‡§Ç‡§¶‡•Ä": {
        "BADGE": "üß† ‡§∞‡§ø‡§ú‡§º‡•ç‡§Ø‡•Ç‡§Æ‡•á ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§ï",
        "TITLE_PREFIX": "",
        "TITLE_CORE": "‡§Ö‡§™‡§®‡•á ‡§∞‡§ø‡§ú‡§º‡•ç‡§Ø‡•Ç‡§Æ‡•á ‡§ï‡•ã",
        "TITLE_GLOW": "‡§¶‡§Æ‡§ï‡§æ‡§á‡§è",
        "TAGLINE": "‡§∞‡§ø‡§ú‡§º‡•ç‡§Ø‡•Ç‡§Æ‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∏‡•á‡§ï‡•ç‡§∂‡§®/‡§∏‡•ç‡§ï‡§ø‡§≤‡•ç‡§∏ ‡§®‡§ø‡§ï‡§æ‡§≤‡•á‡§Ç, ‡§ú‡•â‡§¨ ‡§°‡§ø‡§∏‡•ç‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§∂‡§® ‡§∏‡•á ‡§Æ‡§ø‡§≤‡§æ‡§è‡§Å ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡•Å‡§ß‡§æ‡§∞ ‡§ü‡•ç‡§∞‡•à‡§ï ‡§ï‡§∞‡•á‡§Ç ‚Äî ‡§∏‡§¨ ‡§è‡§ï ‡§π‡•Ä ‡§ú‡§ó‡§π‡•§",
        "CTA_ANALYZE": "‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "CTA_HISTORY": "‡§á‡§§‡§ø‡§π‡§æ‡§∏",
        "CTA_SETTINGS": "‡§∏‡•á‡§ü‡§ø‡§Ç‡§ó‡•ç‡§∏",
        "CTA_ANALYZE_CAP": "‡§∞‡§ø‡§ú‡§º‡•ç‡§Ø‡•Ç‡§Æ‡•á ‡§Ö‡§™‡§≤‡•ã‡§° ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ ‡§á‡§®‡§∏‡§æ‡§á‡§ü‡•ç‡§∏ ‡§™‡§æ‡§è‡§Å‡•§",
        "CTA_HISTORY_CAP": "‡§™‡§ø‡§õ‡§≤‡•Ä ‡§∞‡§®‡§ø‡§Ç‡§ó ‡§¶‡•á‡§ñ‡•á‡§Ç ‡§î‡§∞ CSV ‡§è‡§ï‡•ç‡§∏‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç‡•§",
        "CTA_SETTINGS_CAP": "‡§™‡§æ‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó ‡§î‡§∞ ‡§™‡•ç‡§∞‡•á‡§´‡§∞‡•á‡§Ç‡§∏‡•á‡§ú‡§º ‡§∏‡§Æ‡§æ‡§Ø‡•ã‡§ú‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "FEATURE_1_TITLE": "üîç ‡§∏‡•ç‡§Æ‡§æ‡§∞‡•ç‡§ü ‡§µ‡§ø‡§∂‡•ç‡§≤‡•á‡§∑‡§£",
        "FEATURE_1_BODY": "PDF/DOCX ‡§™‡§æ‡§∞‡•ç‡§∏ ‡§ï‡§∞‡•á‡§Ç, ‡§∏‡•á‡§ï‡•ç‡§∂‡§®, ‡§∏‡•ç‡§ï‡§ø‡§≤‡•ç‡§∏ ‡§î‡§∞ ‡§ó‡•à‡§™‡•ç‡§∏ ‡§™‡§π‡§ö‡§æ‡§®‡•á‡§Ç‡•§ ‡§≠‡•Ç‡§Æ‡§ø‡§ï‡§æ‡§ì‡§Ç ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∞‡•Ç‡§™ ‡§∏‡•ç‡§ï‡•ã‡§∞‡•§",
        "FEATURE_1_BADGE": "NLP ¬∑ ‡§∏‡•ç‡§ï‡•ã‡§∞‡§ø‡§Ç‡§ó ¬∑ ‡§∏‡•Å‡§ù‡§æ‡§µ",
        "FEATURE_2_TITLE": "üìà ‡§∏‡§Ç‡§∏‡•ç‡§ï‡§∞‡§£ ‡§á‡§§‡§ø‡§π‡§æ‡§∏",
        "FEATURE_2_BODY": "‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§¶‡§≤‡§æ‡§µ‡•ã‡§Ç ‡§ï‡•Ä ‡§§‡•Å‡§≤‡§®‡§æ ‡§ï‡§∞‡•á‡§Ç ‡§î‡§∞ CSV ‡§®‡§ø‡§∞‡•ç‡§Ø‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡•§",
        "FEATURE_2_BADGE": "‡§°‡§ø‡§´‡§º‡•ç‡§∏ ¬∑ ‡§ü‡•ç‡§∞‡•á‡§Ç‡§°‡•ç‡§∏",
        "FEATURE_3_TITLE": "‚öôÔ∏è ‡§Ö‡§®‡•Å‡§ï‡•Ç‡§≤‡§®",
        "FEATURE_3_BODY": "‡§è‡§°‡§µ‡§æ‡§Ç‡§∏‡•ç‡§° ‡§™‡§æ‡§∞‡•ç‡§∏‡§ø‡§Ç‡§ó, API ‡§ï‡•Ä‡§ú‡§º ‡§î‡§∞ ‡§∏‡•ç‡§ï‡•ã‡§∞‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§Ö‡§™‡§®‡•Ä ‡§ú‡§º‡§∞‡•Ç‡§∞‡§§ ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§ü‡•ç‡§Ø‡•Ç‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
        "FEATURE_3_BADGE": "‡§ï‡•â‡§®‡•ç‡§´‡§º‡§ø‡§ó ¬∑ ‡§è‡§ï‡•ç‡§∏‡§ü‡•á‡§Ç‡§∏‡§ø‡§¨‡§≤",
        "QUICK_ACTIONS": "‡§§‡•ç‡§µ‡§∞‡§ø‡§§ ‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ‡§è‡§Å",
    },
}

def t(key: str) -> str:
    lang = st.session_state.get("language", "English")
    return _I18N_LOCAL.get(lang, _I18N_LOCAL["English"]).get(key, key)

# --- navigation helper ---
def _goto(page: str):
    st.session_state.page = page
    st.rerun()

def view():
    # HERO
    with st.container():
        st.markdown(
            f"""
            <div class="glass" style="padding:2rem; text-align:center;">
              <div class="badge">{t("BADGE")}</div>
              <h1 style="margin:.5rem 0 0 0; font-size:2.2rem;">
                {t("TITLE_PREFIX")}{t("TITLE_CORE")} <span class="gradient-text">{t("TITLE_GLOW")}</span>
              </h1>
              <p style="color:var(--muted); max-width:860px; margin:.5rem auto 0;">
                {t("TAGLINE")}
              </p>
            </div>
            """,
            unsafe_allow_html=True
        )

    st.markdown("")

    # FEATURE CARDS
    c1, c2, c3 = st.columns(3)
    with c1:
        st.markdown(
            f"""
            <div class="glass" style="height:100%; border-left:3px solid var(--brand);">
              <h3>{t("FEATURE_1_TITLE")}</h3>
              <p style="color:var(--muted);">{t("FEATURE_1_BODY")}</p>
              <div class="badge">{t("FEATURE_1_BADGE")}</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    with c2:
        st.markdown(
            f"""
            <div class="glass" style="height:100%; border-left:3px solid var(--ok);">
              <h3>{t("FEATURE_2_TITLE")}</h3>
              <p style="color:var(--muted);">{t("FEATURE_2_BODY")}</p>
              <div class="badge">{t("FEATURE_2_BADGE")}</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    with c3:
        st.markdown(
            f"""
            <div class="glass" style="height:100%; border-left:3px solid var(--brand-2);">
              <h3>{t("FEATURE_3_TITLE")}</h3>
              <p style="color:var(--muted);">{t("FEATURE_3_BODY")}</p>
              <div class="badge">{t("FEATURE_3_BADGE")}</div>
            </div>
            """,
            unsafe_allow_html=True
        )

    st.markdown("")

    # CTA ROW
    st.markdown('<div class="glass" style="padding:1.1rem;">', unsafe_allow_html=True)
    st.markdown(f"### {t('QUICK_ACTIONS')}")
    a, b, c = st.columns([1,1,1], vertical_alignment="center")

    with a:
        st.markdown('<div class="cta">', unsafe_allow_html=True)
        if st.button("üöÄ " + t("CTA_ANALYZE"), use_container_width=True):
            _goto("Analyze")
        st.caption(t("CTA_ANALYZE_CAP"))
        st.markdown('</div>', unsafe_allow_html=True)

    with b:
        st.markdown('<div class="cta">', unsafe_allow_html=True)
        if st.button("üïò " + t("CTA_HISTORY"), use_container_width=True):
            _goto("History")
        st.caption(t("CTA_HISTORY_CAP"))
        st.markdown('</div>', unsafe_allow_html=True)

    with c:
        st.markdown('<div class="cta">', unsafe_allow_html=True)
        if st.button("üéõÔ∏è " + t("CTA_SETTINGS"), use_container_width=True):
            _goto("Settings")
        st.caption(t("CTA_SETTINGS_CAP"))
        st.markdown('</div>', unsafe_allow_html=True)

    st.markdown('</div>', unsafe_allow_html=True)

    # fun animation (honors Settings toggle)
    if st.session_state.get("animations", True):
        st.balloons()
